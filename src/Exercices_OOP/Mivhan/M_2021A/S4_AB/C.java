package Exercices_OOP.Mivhan.M_2021A.S4_AB;

public class C extends B{
}

/*
**Анализ утверждений:**
**1. Из класса C нет доступа к свойству value класса A, даже если value определено как protected, поскольку речь идет о двух уровнях наследования** **НЕВЕРНО** ✗
Модификатор доступа `protected` позволяет доступ из любого класса-наследника, независимо от количества уровней наследования. Класс C наследуется от B, который наследуется от A, поэтому C имеет доступ к protected-членам A.
**2. Из класса C есть доступ к свойству value только при условии, что свойство value в классе A определено как protected** **НЕВЕРНО** ✗
Это утверждение неполное. Доступ к свойству value из класса C возможен при следующих условиях:
- `public` - доступ есть
- `protected` - доступ есть (так как C наследуется от A)
- `package-private` (по умолчанию) - доступ есть, если все классы в одном пакете
- `private` - доступа нет

**3. Из класса C есть доступ к свойству value класса A с помощью команды super.super.value** **НЕВЕРНО** ✗
В Java не существует конструкции `super.super`. Ключевое слово `super` может использоваться только для обращения к непосредственному родительскому классу. Для доступа к свойству value из класса C нужно использовать просто `value` (если доступ разрешен) или `super.value` (обращение к родительскому классу B).
**4. Из класса C есть доступ к свойству value, поскольку класс C косвенно наследуется от класса A, независимо от разрешения доступа к свойству** **НЕВЕРНО** ✗
Доступ к свойству всегда зависит от модификатора доступа. Если свойство value в классе A определено как `private`, то из класса C к нему доступа не будет, даже при наследовании. Модификаторы доступа определяют видимость членов класса.
**Правильный способ доступа к value из класса C:**
- Если `value` имеет модификатор `public`, `protected` или package-private (и классы в одном пакете), то из C можно обратиться просто: `value`
- Если нужно явно указать, что обращение идет к унаследованному свойству: `this.value`

 */